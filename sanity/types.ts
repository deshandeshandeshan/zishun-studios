/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type WorkLandscapeMedia = {
  _type: "workLandscapeMedia";
  title?: string;
  description?: string;
  video?: MuxVideo;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type WorkInformation = {
  _type: "workInformation";
  title?: string;
  description?: string;
  workDetails?: {
    role?: string;
    location?: string;
    year?: string;
  };
};

export type WorkHeaderMedia = {
  _type: "workHeaderMedia";
  video?: MuxVideo;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type ImageCarousel = {
  _type: "imageCarousel";
  title?: string;
  carouselImages?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: "image";
    };
    _type: "carouselImage";
    _key: string;
  }>;
};

export type CreditsAndAwards = {
  _type: "creditsAndAwards";
  credits?: Array<{
    roleInWork?: string;
    name?: string;
    _type: "credit";
    _key: string;
  }>;
  awards?: Array<{
    awardName?: string;
    awardedFrom?: string;
    _type: "award";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type PressBlock = {
  _type: "pressBlock";
  typeOfPress?: string;
  pressImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  title?: string;
  description?: string;
  linkToPress?: string;
};

export type SinglePortrait = {
  _type: "singlePortrait";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type SingleLandscape = {
  _type: "singleLandscape";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type LongImageRight = {
  _type: "longImageRight";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type LargeImageRight = {
  _type: "largeImageRight";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type LargeImageLeft = {
  _type: "largeImageLeft";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type DoublePortrait = {
  _type: "doublePortrait";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type DoubleLandscape = {
  _type: "doubleLandscape";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type HeaderMedia = {
  _type: "headerMedia";
  title?: string;
  video?: MuxVideo;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type FeaturedContent = {
  _type: "featuredContent";
  selectedWorks?: Array<{
    workTitle?: string;
    workRoute?: string;
    selectedWorkImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: "image";
    };
    _type: "selectedWork";
    _key: string;
  }>;
  categories?: Array<{
    categoryName?: string;
    workRoute?: string;
    categoryImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: "image";
    };
    _type: "category";
    _key: string;
  }>;
};

export type AboutBlock = {
  _type: "aboutBlock";
  description?: string;
  aboutBlockImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type EventBlock = {
  _type: "eventBlock";
  title?: string;
  locationTitle?: string;
  eventImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  description?: string;
  timeAndDate?: {
    date?: string;
    time?: string;
  };
  location?: string;
  details?: string;
  infoAndTickets?: string;
};

export type Painting = {
  _id: string;
  _type: "painting";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  yearCreated?: string;
  description?: string;
  slug?: Slug;
  paintingImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  galleryImages?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: "image";
    };
    _type: "galleryImage";
    _key: string;
  }>;
};

export type SelectedWork = {
  _id: string;
  _type: "selectedWork";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  role?: string;
  selectedWorkImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  content?: Array<{
    _key: string;
  } & AboutBlock | {
    _key: string;
  } & FeaturedContent | {
    _key: string;
  } & HeaderMedia | {
    _key: string;
  } & DoubleLandscape | {
    _key: string;
  } & DoublePortrait | {
    _key: string;
  } & LargeImageLeft | {
    _key: string;
  } & LargeImageRight | {
    _key: string;
  } & SingleLandscape | {
    _key: string;
  } & SinglePortrait | {
    _key: string;
  } & LongImageRight | {
    _key: string;
  } & CreditsAndAwards | {
    _key: string;
  } & ImageCarousel | {
    _key: string;
  } & WorkInformation | {
    _key: string;
  } & WorkHeaderMedia | {
    _key: string;
  } & WorkLandscapeMedia | {
    _key: string;
  } & EventBlock | {
    _key: string;
  } & PressBlock>;
};

export type About = {
  _type: "about";
  description?: string;
  aboutImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  email?: string;
  aboutSocialLinks?: Array<{
    platform?: string;
    url?: string;
    _type: "socialLink";
    _key: string;
  }>;
};

export type FooterSettings = {
  _id: string;
  _type: "footerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email?: string;
  socialLinks?: Array<{
    platform?: string;
    url?: string;
    _type: "socialLink";
    _key: string;
  }>;
  siteDesignAndDevelopment?: string;
};

export type PageBuilder = Array<{
  _key: string;
} & AboutBlock | {
  _key: string;
} & FeaturedContent | {
  _key: string;
} & HeaderMedia | {
  _key: string;
} & DoubleLandscape | {
  _key: string;
} & DoublePortrait | {
  _key: string;
} & LargeImageLeft | {
  _key: string;
} & LargeImageRight | {
  _key: string;
} & SingleLandscape | {
  _key: string;
} & SinglePortrait | {
  _key: string;
} & LongImageRight | {
  _key: string;
} & CreditsAndAwards | {
  _key: string;
} & ImageCarousel | {
  _key: string;
} & WorkInformation | {
  _key: string;
} & WorkHeaderMedia | {
  _key: string;
} & WorkLandscapeMedia | {
  _key: string;
} & EventBlock | {
  _key: string;
} & PressBlock>;

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  content?: PageBuilder;
  seo?: {
    title?: string;
    description?: string;
  };
};

export type MuxVideo = {
  _type: "mux.video";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "mux.videoAsset";
  };
};

export type MuxVideoAsset = {
  _id: string;
  _type: "mux.videoAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  status?: string;
  assetId?: string;
  playbackId?: string;
  filename?: string;
  thumbTime?: number;
  data?: MuxAssetData;
};

export type MuxAssetData = {
  _type: "mux.assetData";
  resolution_tier?: string;
  upload_id?: string;
  created_at?: string;
  id?: string;
  status?: string;
  max_stored_resolution?: string;
  passthrough?: string;
  encoding_tier?: string;
  master_access?: string;
  aspect_ratio?: string;
  duration?: number;
  max_stored_frame_rate?: number;
  mp4_support?: string;
  max_resolution_tier?: string;
  tracks?: Array<{
    _key: string;
  } & MuxTrack>;
  playback_ids?: Array<{
    _key: string;
  } & MuxPlaybackId>;
  static_renditions?: MuxStaticRenditions;
};

export type MuxStaticRenditions = {
  _type: "mux.staticRenditions";
  status?: string;
  files?: Array<{
    _key: string;
  } & MuxStaticRenditionFile>;
};

export type MuxStaticRenditionFile = {
  _type: "mux.staticRenditionFile";
  ext?: string;
  name?: string;
  width?: number;
  bitrate?: number;
  filesize?: number;
  height?: number;
};

export type MuxPlaybackId = {
  _type: "mux.playbackId";
  id?: string;
  policy?: string;
};

export type MuxTrack = {
  _type: "mux.track";
  id?: string;
  type?: string;
  max_width?: number;
  max_frame_rate?: number;
  duration?: number;
  max_height?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = WorkLandscapeMedia | WorkInformation | WorkHeaderMedia | ImageCarousel | CreditsAndAwards | PressBlock | SinglePortrait | SingleLandscape | LongImageRight | LargeImageRight | LargeImageLeft | DoublePortrait | DoubleLandscape | HeaderMedia | FeaturedContent | AboutBlock | EventBlock | Painting | SelectedWork | About | FooterSettings | PageBuilder | Home | MuxVideo | MuxVideoAsset | MuxAssetData | MuxStaticRenditions | MuxStaticRenditionFile | MuxPlaybackId | MuxTrack | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: HOME_QUERY
// Query: *[_type == "home" && slug.current == "home"][0] {    title,    slug,    content[] {      _key,      _type,      ...,      // ABOUT BLOCK      _type == "aboutBlock" => {        description,        "imageUrl": aboutBlockImage.asset->url,        aboutBlockImage {          caption,          alt        }      },      // EVENT BLOCK      _type == "eventBlock" => {        title,        locationTitle,        eventImage {          caption,          alt        },        description,        timeAndDate {          date,          time        },        location,        details,        infoAndTickets      },      // FEATURED CONTENT      _type == "featuredContent" => {        selectedWorks[] {          workTitle,          workRoute,          "imageUrl": selectedWorkImage.asset->url,          selectedWorkImage {            caption,            alt          }        },        categories[] {          categoryName,          workRoute,          "imageUrl": categoryImage.asset->url,          categoryImage {            caption,            alt          }        }      },      // HEADER MEDIA BLOCK      _type == "headerMedia" => {        title,        video,        "imageUrl": image.asset->url,        image {          caption,          alt        }      },      // PRESS BLOCK      _type == "pressBlock" => {        typeOfPress,        pressImage {          caption,          alt        },        title,        description,        linkToPress      },      // CREDITS AND AWARDS BLOCK      _type == "creditsAndAwards" => {        credits[] {          roleInWork,          name        },        awards[] {          awardName,          awardedFrom        },        "imageUrl": image.asset->url,        image {          caption,          alt        }      },      // IMAGE CAROUSEL BLOCK      _type == "imageCarousel" => {        title,        carouselImages[] {          carouselImage {            "imageUrl": image.asset->url,            image {              caption,              alt            }          }        }      },      // WORK HEADER MEDIA BLOCK      _type == "workHeaderMedia" => {        video,        "imageUrl": image.asset->url,        image {          caption,          alt        }      },      // WORK INFORMATION BLOCK      _type == "workInformation" => {        title,        description,        workDetails {          role,          location,          year        }      },      // WORK LANDSCAPE MEDIA BLOCK      _type == "workLandscapeMedia" => {        title,        description,        video,        "imageUrl": image.asset->url,        image {          caption,          alt        }      }    }  }
export type HOME_QUERYResult = null;
// Variable: SELECTED_WORKS_QUERY
// Query: *[_type == "selectedWork"] {    _id,    _createdAt,    title,    role,    "slug": slug.current,    selectedWorkImage {      alt,      asset->{        _id,        url      }    }  }
export type SELECTED_WORKS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  role: string | null;
  slug: string | null;
  selectedWorkImage: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: SINGLE_SELECTED_WORK_QUERY
// Query: *[_type == "selectedWork" && slug.current == $slug][0] {    _id,    _createdAt,    content[] {      _key,      _type,      _type == "doubleLandscape" => {        title,        leftImage { alt, caption, asset->{ _id, url } },        rightImage { alt, caption, asset->{ _id, url } }      },      _type == "doublePortrait" => {        title,        leftImage { alt, caption, asset->{ _id, url } },        rightImage { alt, caption, asset->{ _id, url } }      },      _type == "largeImageLeft" => {        title,        leftImage { alt, caption, asset->{ _id, url } },        rightImage { alt, caption, asset->{ _id, url } }      },      _type == "largeImageRight" => {        title,        leftImage { alt, caption, asset->{ _id, url } },        rightImage { alt, caption, asset->{ _id, url } }      },      _type == "longImageRight" => {        title,        leftImage { alt, caption, asset->{ _id, url } },        rightImage { alt, caption, asset->{ _id, url } }      },      _type == "singleLandscape" => {        title,        image { alt, caption, asset->{ _id, url } }      },      _type == "singlePortrait" => {        title,        image { alt, caption, asset->{ _id, url } }      },      _type == "workInformation" => {        title,        description,        workDetails {          role,          location,          year        }      },      _type == "creditsAndAwards" => {        credits[] {          roleInWork,          name        },        awards[] {          awardName,          awardedFrom        },        "imageUrl": image.asset->url,        image {          caption,          alt        }      },      _type == "imageCarousel" => {        title,        carouselImages[] {          carouselImage {            "imageUrl": image.asset->url,            image {              caption,              alt            }          }        }      },      _type == "workHeaderMedia" => {        "imageUrl": image.asset->url,        image {          caption,          alt        },        video      },      _type == "workLandscapeMedia" => {        title,        description,        video,        "imageUrl": image.asset->url,        image {          caption,          alt        }      }    }  }
export type SINGLE_SELECTED_WORK_QUERYResult = {
  _id: string;
  _createdAt: string;
  content: Array<{
    _key: string;
    _type: "aboutBlock";
  } | {
    _key: string;
    _type: "creditsAndAwards";
    credits: Array<{
      roleInWork: string | null;
      name: string | null;
    }> | null;
    awards: Array<{
      awardName: string | null;
      awardedFrom: string | null;
    }> | null;
    imageUrl: string | null;
    image: {
      caption: string | null;
      alt: string | null;
    } | null;
  } | {
    _key: string;
    _type: "doubleLandscape";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "doublePortrait";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "eventBlock";
  } | {
    _key: string;
    _type: "featuredContent";
  } | {
    _key: string;
    _type: "headerMedia";
  } | {
    _key: string;
    _type: "imageCarousel";
    title: string | null;
    carouselImages: Array<{
      carouselImage: null;
    }> | null;
  } | {
    _key: string;
    _type: "largeImageLeft";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "largeImageRight";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "longImageRight";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "pressBlock";
  } | {
    _key: string;
    _type: "singleLandscape";
    title: string | null;
    image: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "singlePortrait";
    title: string | null;
    image: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "workHeaderMedia";
    imageUrl: string | null;
    image: {
      caption: string | null;
      alt: string | null;
    } | null;
    video: MuxVideo | null;
  } | {
    _key: string;
    _type: "workInformation";
    title: string | null;
    description: string | null;
    workDetails: {
      role: string | null;
      location: string | null;
      year: string | null;
    } | null;
  } | {
    _key: string;
    _type: "workLandscapeMedia";
    title: string | null;
    description: string | null;
    video: MuxVideo | null;
    imageUrl: string | null;
    image: {
      caption: string | null;
      alt: string | null;
    } | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"home\" && slug.current == \"home\"][0] {\n    title,\n    slug,\n\n    content[] {\n      _key,\n      _type,\n      ...,\n\n      // ABOUT BLOCK\n      _type == \"aboutBlock\" => {\n        description,\n        \"imageUrl\": aboutBlockImage.asset->url,\n        aboutBlockImage {\n          caption,\n          alt\n        }\n      },\n\n      // EVENT BLOCK\n      _type == \"eventBlock\" => {\n        title,\n        locationTitle,\n        eventImage {\n          caption,\n          alt\n        },\n        description,\n        timeAndDate {\n          date,\n          time\n        },\n        location,\n        details,\n        infoAndTickets\n      },\n\n      // FEATURED CONTENT\n      _type == \"featuredContent\" => {\n        selectedWorks[] {\n          workTitle,\n          workRoute,\n          \"imageUrl\": selectedWorkImage.asset->url,\n          selectedWorkImage {\n            caption,\n            alt\n          }\n        },\n        categories[] {\n          categoryName,\n          workRoute,\n          \"imageUrl\": categoryImage.asset->url,\n          categoryImage {\n            caption,\n            alt\n          }\n        }\n      },\n\n      // HEADER MEDIA BLOCK\n      _type == \"headerMedia\" => {\n        title,\n        video,\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      },\n\n      // PRESS BLOCK\n      _type == \"pressBlock\" => {\n        typeOfPress,\n        pressImage {\n          caption,\n          alt\n        },\n        title,\n        description,\n        linkToPress\n      },\n\n      // CREDITS AND AWARDS BLOCK\n      _type == \"creditsAndAwards\" => {\n        credits[] {\n          roleInWork,\n          name\n        },\n        awards[] {\n          awardName,\n          awardedFrom\n        },\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      },\n\n      // IMAGE CAROUSEL BLOCK\n      _type == \"imageCarousel\" => {\n        title,\n        carouselImages[] {\n          carouselImage {\n            \"imageUrl\": image.asset->url,\n            image {\n              caption,\n              alt\n            }\n          }\n        }\n      },\n\n      // WORK HEADER MEDIA BLOCK\n      _type == \"workHeaderMedia\" => {\n        video,\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      },\n\n      // WORK INFORMATION BLOCK\n      _type == \"workInformation\" => {\n        title,\n        description,\n        workDetails {\n          role,\n          location,\n          year\n        }\n      },\n\n      // WORK LANDSCAPE MEDIA BLOCK\n      _type == \"workLandscapeMedia\" => {\n        title,\n        description,\n        video,\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      }\n    }\n  }\n": HOME_QUERYResult;
    "\n  *[_type == \"selectedWork\"] {\n    _id,\n    _createdAt,\n    title,\n    role,\n    \"slug\": slug.current,\n    selectedWorkImage {\n      alt,\n      asset->{\n        _id,\n        url\n      }\n    }\n  }\n": SELECTED_WORKS_QUERYResult;
    "\n  *[_type == \"selectedWork\" && slug.current == $slug][0] {\n    _id,\n    _createdAt,\n    content[] {\n      _key,\n      _type,\n\n      _type == \"doubleLandscape\" => {\n        title,\n        leftImage { alt, caption, asset->{ _id, url } },\n        rightImage { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"doublePortrait\" => {\n        title,\n        leftImage { alt, caption, asset->{ _id, url } },\n        rightImage { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"largeImageLeft\" => {\n        title,\n        leftImage { alt, caption, asset->{ _id, url } },\n        rightImage { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"largeImageRight\" => {\n        title,\n        leftImage { alt, caption, asset->{ _id, url } },\n        rightImage { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"longImageRight\" => {\n        title,\n        leftImage { alt, caption, asset->{ _id, url } },\n        rightImage { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"singleLandscape\" => {\n        title,\n        image { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"singlePortrait\" => {\n        title,\n        image { alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"workInformation\" => {\n        title,\n        description,\n        workDetails {\n          role,\n          location,\n          year\n        }\n      },\n\n      _type == \"creditsAndAwards\" => {\n        credits[] {\n          roleInWork,\n          name\n        },\n        awards[] {\n          awardName,\n          awardedFrom\n        },\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      },\n\n      _type == \"imageCarousel\" => {\n        title,\n        carouselImages[] {\n          carouselImage {\n            \"imageUrl\": image.asset->url,\n            image {\n              caption,\n              alt\n            }\n          }\n        }\n      },\n\n      _type == \"workHeaderMedia\" => {\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        },\n        video\n      },\n\n      _type == \"workLandscapeMedia\" => {\n        title,\n        description,\n        video,\n        \"imageUrl\": image.asset->url,\n        image {\n          caption,\n          alt\n        }\n      }\n    }\n  }\n": SINGLE_SELECTED_WORK_QUERYResult;
  }
}
